// Application プロジェクト特有の設定はここに定義
jp.co.tis.lerna.payment.application {
  persistence {
    plugin-id-prefix = "jp.co.tis.lerna.payment.application.persistence.cassandra"

    cassandra {
      tenants {
        example  = ${jp.co.tis.lerna.payment.application.persistence.cassandra.default} {
          journal.keyspace = "akka_example"
        }
        tenant-a = ${jp.co.tis.lerna.payment.application.persistence.cassandra.default} {
          journal.keyspace = "akka_tenant_a"
        }
      }
    }
  }

  util {
    health {
      // Akka Persistence Cassandraの接続/初期化処理を待つ時間
      wait-for-akka-persistence-cassandra-initialization = 100 seconds

      // ヘルスチェック停止した後、HAProxyから切り離されるまで待つ時間
      wait-for-detaching = 5 seconds
    }
  }

  issuing {
    charge {
      number-generation-timeout = 1s
    }
  }

  ecpayment {
    issuing {
      payment-timeout = 15 s

      actor {
        receive-timeout = 30s # TODO: 外部リクエストのタイムアウトより長い時間を設定する。
      }
    }
  }
}

# https://doc.akka.io/docs/akka/2.6.8/persistence-plugins.html#eager-initialization-of-persistence-plugin
# Akka Persistence 拡張を事前に読み込むようにし、akka.persistence.journal.auto-start-journals を有効にする。
akka.extensions += "akka.persistence.Persistence"

akka.actor {
  // serialize binding が漏れていてserializeエラーになると障害なので念の為 java-serializer も使えるようにしておく
  allow-java-serialization = off
  serializers {
    kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
  }
  serialization-bindings {
    "jp.co.tis.lerna.payment.application.ecpayment.issuing.actor.ECPaymentIssuingServiceEvent" = kryo
    "jp.co.tis.lerna.payment.application.ecpayment.issuing.actor.PaymentActor$Command" = kryo
    "jp.co.tis.lerna.payment.adapter.ecpayment.issuing.model.SettlementResponse" = kryo

    "jp.co.tis.lerna.payment.application.util.shutdown.TryGracefulShutdown" = kryo
    "jp.co.tis.lerna.payment.application.util.shutdown.NoNeedShutdown$" = kryo
    "jp.co.tis.lerna.payment.application.util.shutdown.ShutdownCompleted$" = kryo

    "java.lang.RuntimeException"= kryo
    "java.util.concurrent.TimeoutException" = kryo

    "jp.co.tis.lerna.payment.application.ecpayment.issuing.actor.akkacompat.AkkaSerializationCompatibility" = kryo
  }
}

pekko.actor {
  serializers {
    kryo = "io.altoo.serialization.kryo.pekko.PekkoKryoSerializer"
  }
  serialization-bindings {
    "jp.co.tis.lerna.payment.application.ecpayment.issuing.actor.pekkocompat.PekkoSerializationCompatibility" = kryo
  }
}

akka-kryo-serialization {
  id-strategy = "automatic"
  kryo-initializer = "jp.co.tis.lerna.payment.application.util.KryoInit"
}

pekko-kryo-serialization {
  id-strategy = "automatic"
  kryo-initializer = "io.altoo.pekko.serialization.kryo.compat.AkkaCompatKryoInitializer"
//  kryo-initializer = "io.altoo.serialization.kryo.pekko.DefaultKryoInitializer"
}

akka.persistence {
  journal {
    # Akka Persistence Cassandra を HealthCheck で使用しているため、
    # journal plugin を自動起動させ、早めに初期化が実行されるようにする。
    # これによって、初回起動時の HealthCheck にかかる時間を削減することができる。
    auto-start-journals = [
      "jp.co.tis.lerna.payment.application.persistence.cassandra.tenants.example.journal",
      "jp.co.tis.lerna.payment.application.persistence.cassandra.tenants.tenant-a.journal",
    ]
  }
}

# 設定できる項目全体は次のURLで確認できる。
# See: https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/configuration/reference/
datastax-java-driver {
  ## See: https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/#setting-up-the-driver
  basic.contact-points = ["127.0.0.1:9042"]
  basic.contact-points.0 = ${?CASSANDRA_IP_PORT}":9042"
  basic.load-balancing-policy.local-datacenter = "datacenter1"

  # 初期化時の再接続処理を有効にする(推奨)
  # See: https://doc.akka.io/docs/akka-persistence-cassandra/current/migrations.html#driver-upgrade-with-significant-configuration-changes
  advanced.reconnect-on-init = true

  # See: https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/authentication/#plain-texto
  advanced.auth-provider {
    class = PlainTextAuthProvider
    username = cassandra
    password = cassandra
  }
}

# 設定できる項目は次のURLで確認できる。
# See: https://github.com/akka/akka-persistence-cassandra/blob/v1.0.1/core/src/main/resources/reference.conf
jp.co.tis.lerna.payment.application.persistence.cassandra.default = ${akka.persistence.cassandra} {
  journal {
    # ドキュメント: docs/projects/application/ReadModelUpdater用タグ付け.md
    # See also
    # - https://github.com/akka/akka-persistence-cassandra/blob/v1.0.1/core/src/test/scala/akka/persistence/cassandra/query/scaladsl/CassandraReadJournalSpec.scala#L22-L27
    # - https://doc.akka.io/docs/akka/current/persistence.html#event-adapters
    event-adapters {
      readmodelupdater-tagging = "jp.co.tis.lerna.payment.application.readmodelupdater.tagging.TaggingEventAdapter"
    }
    event-adapter-bindings {
      "jp.co.tis.lerna.payment.application.readmodelupdater.salesdetail.model.SalesDetailDomainEvent" = readmodelupdater-tagging
    }
  }

  events-by-tag {
    # Enable DistributedPubSub to announce events for a specific tag have
    # been written. These announcements cause any ongoing getEventsByTag to immediately re-poll, rather than
    # wait. In order enable this feature, make the following settings:
    #
    #    - enable clustering for your actor system
    #    - akka.persistence.cassandra.pubsub-notification=on              (send real-time announcements at most every sec)
    #
    # Setting pubsub-notification to "off" will disable the journal sending these announcements.
    # When enabled with `on` it will throttle the number of notfication messages per tag to at most 10 per second.
    # Alternatively a duration can be defined, such as pubsub-notification=300ms, which will be throttling interval
    # for sending the notifications.
    # NOTE: 0.x 系では cassandra-journal 直下にあった
    pubsub-notification = on


    # 【設定値の根拠】
    # 目的
    # ReadModelへの反映を1秒以内にしたい
    #
    # 各設定値の説明
    # - max-message-batch-size = 10 : バッファの溜まっているイベントが10件になったらまとめてタグ付けする
    # - flush-interval = 100ms : 100msの間に新規永続化イベントが来なければバッファに溜まっているイベントをまとめてタグ付けする
    #
    # 理由
    # イベントが短時間に連続してくると、落ち着く or バッファがFullになるまでタグ付けが遅延し、ReadModelへの反映もその分遅延する
    # その際の遅延時間は最大で、 `max-message-batch-size` * `flush-interval` となる
    # 下記設定値だと 10 * 100ms = 1s となる
    # ※ 掛けて1sになればOKであり、10と100msである必要は無い


    # Tagged events are written to a separate Cassandra table in unlogged batches
    # Max size of these batches
    max-message-batch-size = 10

    # Max time to buffer events for before writing.
    # Larger valeues will increase cassandra write efficiency but increase the delay before
    # seeing events in EventsByTag queries.
    # Setting this to 0 means that tag writes will get written immediately but will still be asynchronous
    # with respect to the PersistentActor's persist call. However, this will be very bad for throughput.
    flush-interval = 100ms

    # アプリケーションの性能要件、50TPS だと単純計算で 1 日に 4,320,000‬ 件のイベントが 1 つのタグに永続化される。
    # 1,000,000 オーダーの推奨値は Minute
    #
    # WARNING: Can not be changed after data has been written
    #
    # Unless you have a significant (million+) of events for a single tag
    # do not change this to Minute. Each tag in the tag-views table has a partition
    # per tag per bucket
    # Valid options: Day, Hour, Minute
    bucket-size = "Minute"

    # For eventsByTag queries how long to delay the query for. For event writes that come from different nodes
    # the clocks may be out of sync meaning events aren't received in order. If the events are delivered to the
    # query immediately the offset may be greater than some delayed events. Meaning that if this offset is saved
    # for restarting the query the delayed events will never be processed.
    # Setting this to anything lower than 2s is highly discouraged.
    # NOTE: 0.x系では cassandra-query-journal.events-by-tag 直下にあった
    eventual-consistency-delay = 2s
  }

  query {
    # New events are retrieved (polled) with this interval.
    //小さく小さいほど読み込みの遅延が小さいですがthroughput上の影響も出ます。
    refresh-interval = 1s
  }
}

lerna.util.sequence.cassandra {
  tenants {
    example = ${lerna.util.sequence.cassandra.default} {
      keyspace = "payment_app_sequence_example"
    }
    tenant-a = ${lerna.util.sequence.cassandra.default} {
      keyspace = "payment_app_sequence_tenant_a"
    }
  }
}

lerna.management.stats {
  metrics-reporter {

    /system-metrics/jvm-memory/heap/used {
      name = "jvm.memory.used"
      tags {
        component = "jvm"
        region   = "heap"
      }
    }

    /system-metrics/jvm-memory/heap/max {
      name = "jvm.memory.max"
      tags {
        component = "jvm"
        region   = "heap"
      }
    }

    /rmu/sales_detail/ec_house_money/update_delay {
      name = "payment-app.rmu.update_delay"
      tags {
        component = "SalesDetail"
        category  = "ECHouseMoney"
      }
    }


    /rmu/sales_detail/ec_house_money/number_of_singleton {
      name = "payment-app.rmu.number_of_singleton"
      tags {
        component = "SalesDetail"
        category  = "ECHouseMoney"
      }
      null-value = 0
    }

  }
}

kamon {
  metric {
    tick-interval = 30 seconds
  }
}
