akka {
  actor {
    provider = "cluster"
  }

  remote {
    artery {
      canonical {
        hostname = "127.0.0.1"
        port = 25520
      }
    }
  }

  cluster {
    seed-nodes = [
      "akka://GatewaySystem@127.0.0.1:25520"
    ]
    sharding.passivate-idle-entity-after = off

    sharding.number-of-shards = 100

    # SBR を有効にする。
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    auto-down-unreachable-after = off
  }
}

akka.coordinated-shutdown {
  exit-jvm = on

  # CoordinatedShutdown is enabled by default and will run the tasks that
  # are added to these phases by individual Akka modules and user logic.
  #
  # The phases are ordered as a DAG by defining the dependencies between the phases
  # to make sure shutdown tasks are run in the right order.
  #
  # In general user tasks belong in the first few phases, but there may be use
  # cases where you would want to hook in new phases or register tasks later in
  # the DAG.
  #
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # - enabled=off: Skip all tasks registered in this phase. DO NOT use
  #                this to disable phases unless you are absolutely sure what the
  #                consequences are. Many of the built in tasks depend on other tasks
  #                having been executed in earlier phases and may break if those are disabled.
  # depends-on=[]: Run the phase after the given phases
  phases {

    # The first pre-defined phase that applications can add tasks to.
    # Note that more phases can be added in the application's
    # configuration by overriding this phase with an additional
    # depends-on.
    before-service-unbind {
      timeout = ${jp.co.tis.lerna.payment.application.util.health.wait-for-detaching}
    }

    # Stop accepting new incoming connections.
    # This is where you can register tasks that makes a server stop accepting new connections. Already
    # established connections should be allowed to continue and complete if possible.
    service-unbind {
      depends-on = [before-service-unbind]
    }

    # Wait for requests that are in progress to be completed.
    # This is where you register tasks that will wait for already established connections to complete, potentially
    # also first telling them that it is time to close down.
    service-requests-done {
      timeout = ${jp.co.tis.lerna.payment.entrypoint.graceful-termination.hard-deadline}
      depends-on = [service-unbind]
    }

    # Final shutdown of service endpoints.
    # This is where you would add tasks that forcefully kill connections that are still around.
    service-stop {
      depends-on = [service-requests-done]
    }

    # Phase for custom application tasks that are to be run
    # after service shutdown and before cluster shutdown.
    before-cluster-shutdown {
      depends-on = [service-stop]
    }

    # Graceful shutdown of the Cluster Sharding regions.
    # This phase is not meant for users to add tasks to.
    cluster-sharding-shutdown-region {
      timeout = 10 s
      depends-on = [before-cluster-shutdown]
    }

    # Emit the leave command for the node that is shutting down.
    # This phase is not meant for users to add tasks to.
    cluster-leave {
      depends-on = [cluster-sharding-shutdown-region]
    }

    # Shutdown cluster singletons
    # This is done as late as possible to allow the shard region shutdown triggered in
    # the "cluster-sharding-shutdown-region" phase to complete before the shard coordinator is shut down.
    # This phase is not meant for users to add tasks to.
    cluster-exiting {
      timeout = 10 s
      depends-on = [cluster-leave]
    }

    # Wait until exiting has been completed
    # This phase is not meant for users to add tasks to.
    cluster-exiting-done {
      depends-on = [cluster-exiting]
    }

    # Shutdown the cluster extension
    # This phase is not meant for users to add tasks to.
    cluster-shutdown {
      depends-on = [cluster-exiting-done]
    }

    # Phase for custom application tasks that are to be run
    # after cluster shutdown and before ActorSystem termination.
    before-actor-system-terminate {
      depends-on = [cluster-shutdown]
    }

    # Last phase. See terminate-actor-system and exit-jvm above.
    # Don't add phases that depends on this phase because the
    # dispatcher and scheduler of the ActorSystem have been shutdown.
    # This phase is not meant for users to add tasks to.
    actor-system-terminate {
      timeout = 10 s
      depends-on = [before-actor-system-terminate]
    }
  }
}

// 特定の外部システムからのみリクエストを受け付けるエンドポイント
private-internet.http {
  interface = "127.0.0.1"
  port = 9001
}

management.http {
  interface = "127.0.0.1"
  port = 9002

  # HealthCheck の設定
  healthcheck {
    # 初期化に3~6秒程度かかり、その間はHealthCheckに失敗するため、初回起動時はリトライ処理を行う。
    # akka.persistence.cassandra.healthcheck.timout = 500 ms とすると、
    # ヘルスチェックにかかる最大時間は約 (500ms * 10) + (300 * 9 * 2.0) = 10,400 ms 程度である。

    # 初回起動時のリトライ最大試行数
    retry-limit-on-init = 10
    # 初回起動時のリトライ処理における最小バックオフ
    retry-min-backoff-on-init = 10ms
    # 初回起動時のリトライ処理における最大バックオフ
    retry-max-backoff-on-init = 300ms
    # ランダムファクタ ( 0.0 ~ 1.0 )
    retry-random-factor-on-init = 1.0
  }
}

jp.co.tis.lerna.payment {

  server-mode = PRODUCTION

  rdbms-read-only = false

  entrypoint {
    graceful-termination {
      // [payment-app終了時] すべての要求と接続が強制的に終了されるまでのタイムアウト
      hard-deadline = ${akka.http.server.request-timeout}
    }
  }
}
