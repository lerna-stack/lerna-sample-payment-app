// Gateway プロジェクト特有の設定はここに定義
jp.co.tis.lerna.payment.gateway {

  issuing {
    tenants {
      example = ${jp.co.tis.lerna.payment.gateway.issuing.default}
      tenant-a = ${jp.co.tis.lerna.payment.gateway.issuing.default}
    }
    default {
      base-url = "http://127.0.0.1:8083"
      path = "/payment"

      response-timeout = 3 second
      retry {
        attempts = 2
        delay = 1 second
      }
    }
  }

  wallet-system {
    tenants {
      example = ${jp.co.tis.lerna.payment.gateway.wallet-system.default}
      tenant-a = ${jp.co.tis.lerna.payment.gateway.wallet-system.default}
    }
    default {
      base-url = "https://127.0.0.1:4436"
      response-timeout = 3 seconds
    }
  }

}

akka.http {
  host-connection-pool {
    // 最大同時接続数
    // HAProxy側の流量制限の数より大きくする
    max-connections = 256

    // min-connections はディフォルトのまま(0)にします
    // min-connections = 0

    // 最大リトライ回数
    // - 2重決済を避けるためリトライ無しにする
    // - Retryの回数が多すぎるとかなり負荷が増える
    max-retries = 0

    // 全コネクションが使用中のときにどれだけ保留するか？（＝キューの長さ）
    // 一時的なサーバー側のレスポンス遅延に有効
    // ※ 処理能力不足には有効ではない
    // https://github.com/akka/akka-http/blob/v10.1.12/akka-http-core/src/main/resources/reference.conf#L371-L377
    max-open-requests = 1024

    // reconnectionがLoadbalanceにメリットがあるので、定期にreconnectionしてほしい、
    // lifetime が短すぎると ConnectionPool の意味がないので、ある程度大きい値にする
    max-connection-lifetime = 600 s

    client {
      // gateway timeout より長くするため120sに上書きしました
      // gateway timeout 時間経過でアプリ側は結果を見なくなるが、裏では通信している。そのリクエストを破棄してコネクションを再利用できるようにするためのもの
      idle-timeout = 120 s
    }
  }
}

lerna.http.proxy {

  tenants {
    example = ${lerna.http.proxy.default} {
      authentication {
        username = "CHANGE_ME"
        password = "CHANGE_ME"
      }
    }
    tenant-a = ${lerna.http.proxy.default} {
      authentication {
        username = "CHANGE_ME"
        password = "CHANGE_ME"
      }
    }
  }

  default {
    host = "proxy.intra.example.com"
    port = "8080"
  }
}
